// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(BlogDbContext))]
    partial class BlogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Model.comment", b =>
                {
                    b.Property<int>("coid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("coid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("agent")
                        .HasColumnName("agent");

                    b.Property<string>("author")
                        .HasColumnName("author");

                    b.Property<int>("authorId")
                        .HasColumnName("authorId");

                    b.Property<int>("cid")
                        .HasColumnName("cid");

                    b.Property<int>("created")
                        .HasColumnName("created");

                    b.Property<string>("ip")
                        .HasColumnName("ip");

                    b.Property<string>("mail")
                        .HasColumnName("mail");

                    b.Property<int>("ownerId")
                        .HasColumnName("ownerId");

                    b.Property<int>("parent")
                        .HasColumnName("parent");

                    b.Property<string>("status")
                        .HasColumnName("status");

                    b.Property<string>("text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<string>("type")
                        .HasColumnName("type");

                    b.Property<string>("url")
                        .HasColumnName("url");

                    b.HasKey("coid");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Model.content", b =>
                {
                    b.Property<int>("cid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("allowComment")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnName("allowComment");

                    b.Property<string>("allowFeed")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnName("allowFeed");

                    b.Property<string>("allowPing")
                        .IsRequired()
                        .HasConversion(new ValueConverter<string, string>(v => default(string), v => default(string), new ConverterMappingHints(size: 1)))
                        .HasColumnName("allowPing");

                    b.Property<int>("authorId")
                        .HasColumnName("authorId");

                    b.Property<int>("commentsNum")
                        .HasColumnName("commentsNum");

                    b.Property<int>("created")
                        .HasColumnName("created");

                    b.Property<int>("modified")
                        .HasColumnName("modified");

                    b.Property<int>("order")
                        .HasColumnName("order");

                    b.Property<string>("password")
                        .HasColumnName("password");

                    b.Property<string>("slug")
                        .HasColumnName("slug")
                        .HasMaxLength(200);

                    b.Property<string>("status")
                        .HasColumnName("status");

                    b.Property<string>("template")
                        .HasColumnName("template");

                    b.Property<string>("text")
                        .HasColumnName("text")
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .HasColumnName("title")
                        .HasMaxLength(200);

                    b.Property<string>("type")
                        .HasColumnName("type");

                    b.HasKey("cid");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("Model.meta", b =>
                {
                    b.Property<int>("mid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("cid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("count")
                        .HasColumnName("count");

                    b.Property<string>("description")
                        .HasColumnName("description");

                    b.Property<string>("name")
                        .HasColumnName("name");

                    b.Property<int>("order")
                        .HasColumnName("order");

                    b.Property<string>("slug")
                        .HasColumnName("slug");

                    b.Property<string>("type")
                        .HasColumnName("type");

                    b.HasKey("mid");

                    b.ToTable("Meta");
                });

            modelBuilder.Entity("Model.option", b =>
                {
                    b.Property<string>("name")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("name");

                    b.Property<int>("user")
                        .HasColumnName("user");

                    b.Property<string>("value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("name");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Model.relationship", b =>
                {
                    b.Property<int>("cid")
                        .HasColumnName("cid");

                    b.Property<int>("mid")
                        .HasColumnName("mid");

                    b.HasKey("cid", "mid");

                    b.HasIndex("mid");

                    b.ToTable("Relationship");
                });

            modelBuilder.Entity("Model.user", b =>
                {
                    b.Property<int>("uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("uid")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("activated")
                        .HasColumnName("activated");

                    b.Property<string>("authCode")
                        .HasColumnName("authCode");

                    b.Property<int>("created")
                        .HasColumnName("created");

                    b.Property<string>("group")
                        .HasColumnName("group");

                    b.Property<int>("logged")
                        .HasColumnName("logged");

                    b.Property<string>("mail")
                        .HasColumnName("mail");

                    b.Property<int>("name")
                        .HasColumnName("name");

                    b.Property<string>("password")
                        .HasColumnName("password");

                    b.Property<string>("screenName")
                        .HasColumnName("screenName");

                    b.Property<string>("url")
                        .HasColumnName("url");

                    b.HasKey("uid");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Model.relationship", b =>
                {
                    b.HasOne("Model.content", "content")
                        .WithMany("relationship")
                        .HasForeignKey("cid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.meta", "meta")
                        .WithMany("relationship")
                        .HasForeignKey("mid")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
